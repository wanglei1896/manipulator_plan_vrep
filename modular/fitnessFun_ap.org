* DONE 思考轨迹模型
** 可以用多段多项式
1. 偶数段轨迹，每段轨迹由一端的关节位置、速度以及另一端的关节位置、速度、加速度确定
2. 通过调节每段轨迹右端的关节位置、速度值来优化，左端值固定
3. 优化时分两轮，第一轮优化奇数位置的段，后一轮优化偶数位置(不含0)的段，如下6段时:
   x---.   x---.   x---.   x (第一轮)
   x   x---.   x---.   x---. (第二轮)
** 输入数据
1. 规范化后的路径点序列
2. 起始位置
** 输出数据
每个时刻各关节的位置，一个二维数组
** 调试分析数据
   每组天牛每轮每次迭代的最优适应度和适应度值
* DONE 思考维度过高后的优化策略
** 描述
轨迹段过多则会导致要优化的参数过多
** 方法
将天牛分组:
1. 每组天牛在不同的维度上优化，所有的维度对应了同一个适应度值。
   不同维度的天牛之间也分享信息，如将自己这边维度上的当前最优值分享给其它维度的组。
   如AlgorithmBSO_fun.org中想尝试的那样。
2. 每组天牛优化不同的轨迹段，每段轨迹段单独一个适应度函数，
   总的适应度函数可以表示为每段适应度函数相加，因此只要单独优化每一段就行了。
   段和段之间最好能解耦，否则每组面对的将是一个变化的适应度函数，需重新设计步长策略。
   每组之间可引入一些竞争(适应度高的天牛优化较长的段，低的优化短段),不过这样也会引入变化的适应度函数
* DONE 如何比较规划出的路径和原路径的符合程度
** 描述
因为这两段路径一般用有序点表示，不能单纯靠逐个比较相邻点来衡量：
1. 采样率不一样，导致两个路径序列不一样长，不好对齐比较
2. 采样的路径点密度不一样，很多采样点可能集中在一个地方，但这对路径的形状没影响
** 方法
- 求出两段路径点包围的多边形面积
- 将两段路径变化成等长等密度(各点间距离相等)，再逐个点比较
* TODO 构造适应度函数
** DONE 解决组与组之间的信息共享问题
在fitnessfun中设置一个数组存储所有组的信息
** TODO 比较两段路径相符程度的项
求两段路径相应点的距离，累加后作为惩罚项。
*** 寻优的指向性似乎不高
1. 如果仅仅以其中一对点的距离作为惩罚项，则很好优化
2. 取两对以上的点就很难优化了
3. 每对点的距离之间会相互影响，经常反相关，导致优化失败
** 避障部分太耗时
主要是GJK算法太耗时
1. 用更低代价的表示，如仅用3D建模的中心位置，然后计算两几何体的中心位置距离作为代价值，
必要时(需精确计算)再用GJK计算
2. 用C++实现GJK算法，matlab调用C++库
** DONE 参数到轨迹的转换函数
** DONE 参数编码
1-6: 每段右端关节角度
7-12: 每段右端关节速度
13: 本段所耗时间
* DONE planner过程的调度
** DONE 设置超参数(组数、每组天牛数、每轮迭代次数)
** DONE 给每组天牛分配相应路径段
** DONE 两轮各组分别优化
* TODO 存在的问题
** 效果不佳
继续检查代码
** 总的适应度函数值历史还没存储
